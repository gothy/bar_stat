// Generated by CoffeeScript 1.3.1
(function() {
  var app, bcrypt, db, express, fs, get_browser_name, get_ts_and_day_ts, __;

  fs = require('fs');

  express = require('express');

  app = express();

  db = require("redis").createClient();

  __ = require('underscore');

  bcrypt = require('bcrypt');

  app.use(express.cookieParser('om nom nom'));

  app.use(express.session());

  app.use('/bar_stat/static/', express["static"](__dirname + '/static'));

  app.set('views', __dirname + '/templates');

  app.engine('html', function(path, options, fn) {
    return fs.readFile(path, 'utf8', function(err, str) {
      var html;
      if (err) {
        return fn(err);
      }
      try {
        html = __.template(str, options);
        return fn(null, html);
      } catch (err) {
        return fn(err);
      }
    });
  });

  get_browser_name = function(useragent) {
    var name;
    if (useragent.indexOf('Safari') >= 0) {
      if (useragent.indexOf('Chrome') >= 0) {
        return name = 'chrome';
      } else {
        return name = 'safari';
      }
    } else if (useragent.indexOf('Firefox') >= 0) {
      return name = 'ff';
    } else if (useragent.indexOf('Opera') >= 0) {
      return name = 'opera';
    } else if (useragent.indexOf('MSIE') >= 0) {
      return name = 'msie';
    } else {
      return name = 'other';
    }
  };

  get_ts_and_day_ts = function(date) {
    var cts, day_ts;
    cts = date.getTime();
    day_ts = "" + (date.getUTCFullYear()) + "-" + (date.getUTCMonth()) + "-" + (date.getUTCDate());
    return [cts, day_ts];
  };

  app.get('/bar_stat/session/:partner/:instid', function(req, res, next) {
    var browser, cts, day_ts, instid, partner, _ref, _ref1,
      _this = this;
    instid = req.params.instid;
    partner = req.params.partner;
    browser = get_browser_name((_ref = req.headers) != null ? _ref['user-agent'] : void 0);
    console.log("new session request: " + partner + ":" + instid);
    if (!instid || !partner) {
      return;
    }
    _ref1 = get_ts_and_day_ts(new Date()), cts = _ref1[0], day_ts = _ref1[1];
    db.sismember("partners", partner, function(err, reply) {
      if (!reply) {
        return db.sadd("partners", partner);
      }
    });
    db.incr("" + partner + "." + day_ts + ".s_count", function(err, reply) {});
    db.sismember("" + partner + ".users", instid, function(err, reply) {
      db.sadd("" + partner + ".users", instid);
      if (!reply) {
        return db.incr("" + partner + "." + day_ts + ".nu_count");
      }
    });
    db.sadd("" + partner + "." + day_ts + ".users", instid, function(err, reply) {
      if (reply) {
        return db.incr("" + partner + "." + day_ts + ".u_count");
      }
    });
    return res.send('ok');
  });

  app.get('/bar_stat/panel/:partner/', function(req, res, next) {
    var needs_auth;
    needs_auth = !(req.session.loggedin && req.session.user === req.params.partner);
    return res.render('index.html', {
      partner: req.params.partner,
      needs_auth: needs_auth
    });
  });

  app.get('/bar_stat/api/login/:partner/', function(req, res, next) {
    var partner, secret;
    partner = req.params.partner;
    secret = req.query.secret;
    if (!secret) {
      res.send('nosecret', 400);
    }
    console.log("" + partner + " login attempt");
    return db.hget("partner.creds." + partner, 'hsecret', function(err, reply) {
      var success;
      if (!reply) {
        res.send('nouser', 400);
      }
      success = bcrypt.compareSync(secret, reply);
      if (success) {
        req.session.user = partner;
        req.session.loggedin = true;
        return res.send('ok');
      } else {
        req.session.loggedin = false;
        return res.send('badsecret', 401);
      }
    });
  });

  app.get('/bar_stat/api/:partner/usage', function(req, res, next) {
    var day_ts, multi, partner, ts, _ref,
      _this = this;
    partner = req.params.partner;
    if (!(req.session.loggedin && req.session.user === partner)) {
      res.send('denied', 401);
    }
    _ref = get_ts_and_day_ts(new Date()), ts = _ref[0], day_ts = _ref[1];
    multi = db.multi();
    multi.scard("" + partner + ".users");
    multi.get("" + partner + "." + day_ts + ".u_count");
    multi.get("" + partner + "." + day_ts + ".nu_count");
    multi.get("" + partner + "." + day_ts + ".s_count");
    return multi.exec(function(err, replies) {
      var reply;
      if (err) {
        throw err;
      }
      reply = {
        u_count_total: replies[0] || 0,
        u_count: replies[1] || 0,
        nu_count: replies[2] || 0,
        s_count: replies[3] || 0
      };
      return res.send(reply);
    });
  });

  app.listen(1337);

  console.log('barstat started', new Date());

  process.on('uncaughtException', function(err) {
    return console.error(err.stack);
  });

}).call(this);
