// Generated by CoffeeScript 1.3.1
(function() {
  var ROOT_PATH, barstat, buster, redis, request, utils,
    _this = this;

  buster = require("buster");

  request = require('request');

  redis = require('redis');

  utils = require('../utils');

  barstat = require('../barstat');

  ROOT_PATH = 'http://localhost:1337/bar_stat/';

  buster.testCase('test api', {
    setUp: function(done) {
      var db,
        _this = this;
      this.db = db = utils.get_db_client();
      return db.select(10, function() {
        return db.flushdb(function(err, reply) {
          var multi;
          console.log('cleaning up test DB ');
          _this.spy(utils, 'get_db_client');
          _this.spy(utils, 'get_ts_and_day_ts');
          _this.spy(utils, 'get_browser_name');
          if (!barstat.RUNNING) {
            barstat.launch();
          }
          multi = db.multi();
          multi.hset('partner.creds.test', 'hsecret', "$2a$10$bNgCrGwIGGCaffxAQ1Hku.frwE819shB4ATbpKr1Vp5C1Gdo3EM8y");
          multi.hset('partner.creds.overall', 'hsecret', "$2a$10$bNgCrGwIGGCaffxAQ1Hku.frwE819shB4ATbpKr1Vp5C1Gdo3EM8y");
          return multi.exec(function(err, replies) {
            return done();
          });
        });
      });
    },
    'test new session': function(done) {
      return request("" + ROOT_PATH + "session/test/testid/", function(err, res, body) {
        assert.calledOnce(utils.get_db_client);
        assert.calledOnce(utils.get_ts_and_day_ts);
        assert.calledOnce(utils.get_browser_name);
        assert.same(res.statusCode, 200);
        assert.same(body, 'ok');
        return done();
      });
    },
    'test panel': function(done) {
      return request({
        url: "" + ROOT_PATH + "panel/test/",
        jar: false
      }, function(err, res, body) {
        refute.called(utils.get_db_client);
        refute.called(utils.get_ts_and_day_ts);
        assert.match(body, 'needs_auth = true');
        return done();
      });
    },
    'test login without pwd': function(done) {
      return request("" + ROOT_PATH + "api/login/test/", function(err, res, body) {
        refute.called(utils.get_db_client);
        refute.called(utils.get_ts_and_day_ts);
        assert.same(res.statusCode, 400);
        assert.same(body, 'nosecret');
        return done();
      });
    },
    'test login with wrong user': function(done) {
      return request("" + ROOT_PATH + "api/login/testeee/?secret=f1234", function(err, res, body) {
        assert.calledOnce(utils.get_db_client);
        refute.called(utils.get_ts_and_day_ts);
        assert.same(res.statusCode, 400);
        assert.same(body, 'nouser');
        return done();
      });
    },
    'test login with wrong pwd': function(done) {
      return request("" + ROOT_PATH + "api/login/test/?secret=f1234", function(err, res, body) {
        assert.calledOnce(utils.get_db_client);
        refute.called(utils.get_ts_and_day_ts);
        assert.same(res.statusCode, 401);
        assert.same(body, 'badsecret');
        return done();
      });
    },
    'test login': function(done) {
      return request("" + ROOT_PATH + "api/login/test/?secret=ololo", function(err, res, body) {
        assert.calledOnce(utils.get_db_client);
        refute.called(utils.get_ts_and_day_ts);
        assert.same(res.statusCode, 200);
        assert.same(body, 'ok');
        return done();
      });
    },
    'test usage': {
      setUp: function(done) {
        return request("" + ROOT_PATH + "session/test/1q2w3e4r5t6y7u/", function(err, res, body) {
          assert.equals(body, 'ok');
          return request("" + ROOT_PATH + "session/test2/0o9i8u7y6t/", function(err, res, body) {
            assert.equals(body, 'ok');
            return done();
          });
        });
      },
      'test panel api for <test> partner': {
        setUp: function(done) {
          return request("" + ROOT_PATH + "api/login/test/?secret=ololo", function(err, res, body) {
            return done();
          });
        },
        'test usage for <test>': function(done) {
          return request("" + ROOT_PATH + "api/test/usage", function(err, res, body) {
            var resobj;
            resobj = JSON.parse(body);
            assert.equals(resobj, {
              "u_count_total": 1,
              "u_count": 1,
              "nu_count": 1,
              "s_count": 1,
              "chrome_count": 0,
              "ff_count": 0,
              "opera_count": 0
            });
            return done();
          });
        },
        'test graphdata for <test>': function(done) {
          return request("" + ROOT_PATH + "api/test/graphdata", function(err, res, body) {
            var day_data, resobj, _i, _len;
            resobj = JSON.parse(body);
            assert.equals(resobj.length, 14);
            for (_i = 0, _len = resobj.length; _i < _len; _i++) {
              day_data = resobj[_i];
              assert.equals(day_data.data, [0, 0]);
              assert.defined(day_data.name);
            }
            return done();
          });
        }
      },
      'test panel api for overall usage': {
        setUp: function(done) {
          return request("" + ROOT_PATH + "api/login/overall/?secret=ololo", function(err, res, body) {
            return done();
          });
        },
        'test usage for overall': function(done) {
          return request("" + ROOT_PATH + "api/overall/usage", function(err, res, body) {
            var resobj;
            resobj = JSON.parse(body);
            assert.equals(resobj, {
              "u_count_total": 2,
              "u_count": 2,
              "nu_count": 2,
              "s_count": 2,
              "chrome_count": 0,
              "ff_count": 0,
              "opera_count": 0
            });
            return done();
          });
        }
      }
    }
  });

}).call(this);
